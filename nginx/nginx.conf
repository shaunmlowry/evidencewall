events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting - Enhanced security
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=strict:10m rate=2r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Upstream servers
    upstream auth_backend {
        server auth-service:8001;
    }
    
    upstream boards_backend {
        server boards-service:8002;
    }
    
    upstream realtime_backend {
        server realtime-service:8003;
    }
    
    upstream frontend_backend {
        server frontend:80;
    }

    # Uncomment this block for production with HTTPS redirect
    # server {
    #     listen 80;
    #     server_name localhost;
    #     
    #     # Redirect all HTTP traffic to HTTPS
    #     return 301 https://$server_name$request_uri;
    # }
    
    # Development server (uncomment for local development without SSL)
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # API routes with rate limiting
        location /api/auth/ {
            limit_req zone=auth burst=20 nodelay;
            proxy_pass http://auth_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "http://localhost" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            add_header Access-Control-Allow-Credentials true always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        location /api/boards/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://boards_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "http://localhost" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            add_header Access-Control-Allow-Credentials true always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # WebSocket proxy for realtime service
        location /api/realtime/ {
            proxy_pass http://realtime_backend/;
            rewrite ^/api/realtime/(.*)$ /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }
        
        # Frontend application
        location / {
            proxy_pass http://frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # HTTPS server - REQUIRED for production (commented out for development)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #     
    #     # SSL Configuration
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # Security headers
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     add_header X-Frame-Options DENY always;
    #     add_header X-Content-Type-Options nosniff always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    #     add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:;" always;
    #     
    #     # API routes with rate limiting
    #     location /api/auth/ {
    #         limit_req zone=auth burst=20 nodelay;
    #         limit_conn conn_limit_per_ip 10;
    #         proxy_pass http://auth_backend/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         
    #         # CORS headers for API
    #         add_header Access-Control-Allow-Origin "https://localhost" always;
    #         add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    #         add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
    #         add_header Access-Control-Allow-Credentials true always;
    #         
    #         if ($request_method = 'OPTIONS') {
    #             return 204;
    #         }
    #     }
    #     
    #     location /api/boards/ {
    #         limit_req zone=api burst=50 nodelay;
    #         limit_conn conn_limit_per_ip 10;
    #         proxy_pass http://boards_backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         
    #         # CORS headers for API
    #         add_header Access-Control-Allow-Origin "https://localhost" always;
    #         add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    #         add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
    #         add_header Access-Control-Allow-Credentials true always;
    #         
    #         if ($request_method = 'OPTIONS') {
    #             return 204;
    #         }
    #     }
    #     
    #     # WebSocket proxy for realtime service
    #     location /api/realtime/ {
    #         proxy_pass http://realtime_backend/;
    #         rewrite ^/api/realtime/(.*)$ /$1 break;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_cache_bypass $http_upgrade;
    #         proxy_read_timeout 86400;
    #     }
    #     
    #     # Frontend application
    #     location / {
    #         proxy_pass http://frontend_backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    #     
    #     # Health check endpoint
    #     location /health {
    #         access_log off;
    #         return 200 "healthy\n";
    #         add_header Content-Type text/plain;
    #     }
    # }
}
